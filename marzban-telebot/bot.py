import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)
from config import BOT_TOKEN, ADMIN_ID, MESSAGES
from marzban_api import MarzbanAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
BROADCAST_MESSAGE, USER_MESSAGE, SELECT_USER = range(3)

class MarzbanBot:
    def __init__(self):
        self.api = MarzbanAPI()
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("status", self.server_status))
        self.application.add_handler(CommandHandler("myinfo", self.subscription_info))

        # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("users", self.list_users))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        first_name = update.effective_user.first_name

        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n{MESSAGES['start']}"

        if user_id == ADMIN_ID:
            keyboard = [['üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞', 'üìã –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'],
                       ['üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üÜò –ü–æ–º–æ—â—å']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                welcome_text + "\n\n" + MESSAGES['admin_welcome'],
                reply_markup=reply_markup
            )
        else:
            keyboard = [['üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞', 'üìã –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'], ['üÜò –ü–æ–º–æ—â—å']]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup
            )

    async def server_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        status = self.api.get_server_status()

        message = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
            f"üñ•Ô∏è CPU: {status['cpu_usage']}%\n"
            f"üíæ –ü–∞–º—è—Ç—å: {status['memory_usage']}%\n"
            f"üì∂ –¢—Ä–∞—Ñ–∏–∫: {status['network_usage']}\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {status['total_users']}\n"
            f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status['active_users']}\n"
            f"‚è∞ –ê–ø—Ç–∞–π–º: {status['uptime']}"
        )

        await update.message.reply_text(message, parse_mode='HTML')

    async def subscription_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user_info = self.api.get_user(user_id)

        message = (
            f"üìã <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            f"üë§ –ò–º—è: {user_info['username']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {user_info['created_at']}\n"
            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {user_info['expire']}\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_info['used_traffic']}\n"
            f"üìà –õ–∏–º–∏—Ç: {user_info['data_limit']}\n"
            f"üîß –°—Ç–∞—Ç—É—Å: {user_info['status']}"
        )

        await update.message.reply_text(message, parse_mode='HTML')

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        keyboard = [['üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞', 'üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
                   ['üìã –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', 'üÜò –ü–æ–º–æ—â—å']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            MESSAGES['admin_welcome'],
            reply_markup=reply_markup
        )

    async def list_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        users = self.api.get_all_users()

        if not users:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        message = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user in users:
            message += f"üë§ {user['username']} - {user['status']}\n"

        await update.message.reply_text(message, parse_mode='HTML')

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.effective_user.id

        if text == 'üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞':
            await self.server_status(update, context)
        elif text == 'üìã –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞':
            await self.subscription_info(update, context)
        elif text == 'üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' and user_id == ADMIN_ID:
            await self.list_users(update, context)
        elif text == 'üÜò –ü–æ–º–æ—â—å':
            await update.message.reply_text("‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å\n/status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n/myinfo - –º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\n/admin - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Marzban Telegram Bot...")
    print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è MOCK –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    if not BOT_TOKEN or BOT_TOKEN == "your_test_bot_token_here":
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return

    bot = MarzbanBot()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    bot.application.run_polling()

if __name__ == '__main__':
    main()