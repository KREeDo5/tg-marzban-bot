import logging
import asyncio
from datetime import time  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

from shared import (
    CLIENT_BOT_TOKEN,
    MESSAGES,
    MarzbanAPI,
    get_client_keyboard,
    get_configs_message,
    get_subscription_message,
    get_commands_message
)

from shared.file_broadcast import broadcast_manager

from shared.buttons import (
    CLIENT_BUTTON_CONFIGS,
    CLIENT_BUTTON_SUBSCRIPTION,
    CLIENT_BUTTON_COMMANDS,
    BUTTON_RESTART,
    CLIENT_TRAFFIC_RESET
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class ClientBot:
    def __init__(self):
        self.api = MarzbanAPI()
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application —Å JobQueue
        self.application = Application.builder().token(CLIENT_BOT_TOKEN).build()

        self.CLIENT_BUTTON_CONFIGS = CLIENT_BUTTON_CONFIGS
        self.CLIENT_BUTTON_SUBSCRIPTION = CLIENT_BUTTON_SUBSCRIPTION
        self.CLIENT_BUTTON_COMMANDS = CLIENT_BUTTON_COMMANDS
        self.CLIENT_BUTTON_RESTART = BUTTON_RESTART
        self.CLIENT_TRAFFIC_RESET = CLIENT_TRAFFIC_RESET

        self.setup_handlers()
        self.setup_jobs()  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("restart", self.restart_bot))
        self.application.add_handler(CommandHandler("my_configs", self.user_configs))
        self.application.add_handler(CommandHandler("my_info", self.subscription_info))
        self.application.add_handler(CommandHandler("reset_traffic", self.reset_traffic))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        self.application.job_queue.run_repeating(
            self.check_broadcasts,
            interval=30.0,
            first=10.0,
            name="check_broadcasts"
        )
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
        self.application.job_queue.run_daily(
            self.cleanup_old_broadcasts,
            time=time(hour=3, minute=0),
            days=(0, 1, 2, 3, 4, 5, 6),
            name="cleanup_broadcasts"
        )

    async def cleanup_old_broadcasts(self, context: ContextTypes.DEFAULT_TYPE):
        try:
            broadcast_manager.cleanup_old_broadcasts(days=1)
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")

    async def show_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        await update.message.reply_text(get_commands_message(), parse_mode='HTML')

    async def reset_traffic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        telegram_id = update.effective_user.id
        telegram_name = update.effective_user.username
        user_data = self.api.get_user(telegram_id, telegram_name)
        if not user_data:
            await update.message.reply_text(
                MESSAGES['user_not_found'],
            )
            return
        username = user_data.get('username')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±—Ä–æ—Å–∞
        reset_message = await update.message.reply_text(
            "üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫...",
            reply_markup=ReplyKeyboardRemove()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context.chat_data['last_reset_message_id'] = reset_message
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞
        success, message = self.api.reset_user_traffic(username)
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await update.message.reply_text(
                f"‚úÖ {message}\n\n",
                reply_markup=ReplyKeyboardMarkup(get_client_keyboard(), resize_keyboard=True)
            )
            await self.subscription_info(update, context)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await update.message.reply_text(
                f"‚ùå {message}",
                reply_markup=ReplyKeyboardMarkup(get_client_keyboard(), resize_keyboard=True)
            )

    async def subscription_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        telegram_id = update.effective_user.id
        telegram_name = update.effective_user.username
        user_data = self.api.get_user(telegram_id, telegram_name)
        if not user_data:
            await update.message.reply_text(
                MESSAGES['user_not_found'],
            )
            return
        message = get_subscription_message(user_data)
        await update.message.reply_text(message, parse_mode='HTML')

    async def user_configs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        telegram_id = update.effective_user.id
        telegram_name = update.effective_user.username
        user_data = self.api.get_user(telegram_id, telegram_name)
        if not user_data:
            await update.message.reply_text(
                MESSAGES['user_not_found'],
            )
            return
        message = get_configs_message(user_data)
        await update.message.reply_text(message, parse_mode='HTML')

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        first_name = update.effective_user.first_name
        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n\n–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        reply_markup = ReplyKeyboardMarkup(get_client_keyboard(), resize_keyboard=True)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def restart_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...",
            reply_markup=ReplyKeyboardRemove()
        )
        await asyncio.sleep(0.8)
        await self.start(update, context)

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        await {
            CLIENT_BUTTON_CONFIGS: self.user_configs,
            CLIENT_BUTTON_SUBSCRIPTION: self.subscription_info,
            CLIENT_BUTTON_COMMANDS: self.show_commands,
            BUTTON_RESTART: self.restart_bot,
            CLIENT_TRAFFIC_RESET: self.reset_traffic,
        }.get(text, lambda u, c: u.message.reply_text(MESSAGES['unknown_command']))(update, context)

    async def check_broadcasts(self, context: ContextTypes.DEFAULT_TYPE):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        try:
            broadcasts = broadcast_manager.get_pending_broadcasts()
            if not broadcasts:
                return

            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(broadcasts)} —Ä–∞—Å—Å—ã–ª–æ–∫")

            for file_path, broadcast_data in broadcasts:
                message = broadcast_data['message']
                admin_id = broadcast_data['admin_id']

                print(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç admin_{admin_id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                sent_count = await self.deliver_broadcast(message)
                print(f"‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π")

                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                broadcast_manager.mark_as_processed(file_path)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")

    async def deliver_broadcast(self, message):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            users = self.api.get_all_users()
            if not users:
                print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return 0
            sent_count = 0
            error_count = 0
            print(f"üë• –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            for user in users:
                try:
                    note = user.get('note', '')
                    note_data = self.api.extract_data_from_note(note)
                    telegram_id = note_data.get('telegram_id')
                    if not telegram_id:
                        continue
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.application.bot.send_message(
                        chat_id=telegram_id,
                        text=f"üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message}",
                        parse_mode='HTML'
                    )
                    sent_count += 1
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                    if sent_count % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                        await asyncio.sleep(1)
                    else:
                        await asyncio.sleep(0.1)
                except Exception as e:
                    error_count += 1
                    if error_count < 5:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('username')}: {e}")
                    continue
            print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {error_count}")
            return sent_count
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return 0

def main():
    """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ TG-Marzban-Client Bot...")

    if not CLIENT_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: CLIENT_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    bot = ClientBot()
    bot.application.run_polling()

if __name__ == '__main__':
    main()