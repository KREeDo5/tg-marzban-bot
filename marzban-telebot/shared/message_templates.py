from datetime import datetime
"""
–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞
"""
def get_configs_message(user_data):
    if not user_data or 'proxies' not in user_data:
        return "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    proxies = user_data.get('proxies', {})
    inbounds = user_data.get('inbounds', {})
    links = user_data.get('links', [])

    message = "üá´üáÆ <b>–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n\n"

    # –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å –∏—Ö emoji
    protocol_emojis = {
        'vless': 'üöÄ',
        'vmess': 'üü¢',
        'shadowsocks': 'üåÄ',
        'trojan': 'üü†',
    }

    # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
    for protocol, config in proxies.items():
        if protocol in inbounds and inbounds[protocol]:
            emoji = protocol_emojis.get(protocol, 'üîπ')
            message += f"{emoji} <b>{protocol.upper()}</b>\n"

            # –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if protocol == 'vless':
                message += f"   ‚îî UUID: <code>{config.get('id')}</code>\n"
                if config.get('flow'):
                    message += f"   ‚îî Flow: <code>{config.get('flow')}</code>\n"

            elif protocol == 'shadowsocks':
                message += f"   ‚îî –ú–µ—Ç–æ–¥: <code>{config.get('method')}</code>\n"
                message += f"   ‚îî –ü–∞—Ä–æ–ª—å: <code>{config.get('password')}</code>\n"

            message += f"   ‚îî –ü–æ—Ä—Ç: <code>{get_port_from_links(links, protocol)}</code>\n"
            message += f"   ‚îî Inbounds: {', '.join(inbounds[protocol])}\n\n"

    # –ö–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    if links:
        message += "üìé <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
        for i, link in enumerate(links, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É
            protocol_type = get_protocol_from_link(link)
            emoji = protocol_emojis.get(protocol_type, 'üîó')
            message += f"{emoji} <code>{link}</code>\n\n"
        message += "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç</i>\n\n"

    # # QR –∫–æ–¥ –∏ –ø–æ–¥–ø–∏—Å–∫–∞
    # subscription_url = user_data.get('subscription_url')
    # if subscription_url:
    #     full_sub_url = f"https://your-domain.com{subscription_url}"
    #     message += f"üì° <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n<code>{full_sub_url}</code>\n\n"

    return message

def get_protocol_from_link(link):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —Å—Å—ã–ª–∫–µ"""
    if link.startswith('vless://'):
        return 'vless'
    elif link.startswith('vmess://'):
        return 'vmess'
    elif link.startswith('ss://'):
        return 'shadowsocks'
    elif link.startswith('trojan://'):
        return 'trojan'
    return 'unknown'

def get_port_from_links(links, protocol):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ä—Ç –∏–∑ —Å—Å—ã–ª–æ–∫"""
    for link in links:
        if get_protocol_from_link(link) == protocol:
            try:
                # –ü–∞—Ä—Å–∏–º –ø–æ—Ä—Ç –∏–∑ URL
                import urllib.parse
                parsed = urllib.parse.urlparse(link)
                return parsed.port or 'N/A'
            except:
                return 'N/A'
    return 'N/A'

def get_subscription_message(user_data):
    """–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    created_at = user_data.get('created_at', 'N/A')
    formatted_created_date = format_date(created_at, default="–î–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    expire_date = user_data.get('expire', '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ')
    formatted_expire_date = format_date(expire_date)
    time_until_expiry = get_time_until_expiry(expire_date)

    used_traffic = user_data.get('used_traffic', 0)
    formatted_traffic = format_traffic(used_traffic)

    fulltime_used_traffic = user_data.get('lifetime_used_traffic', 0)
    formatted_fulltime_traffic = format_traffic(fulltime_used_traffic)

    message = (
        f"<b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        f"üîß –°—Ç–∞—Ç—É—Å: {user_data.get('status', 'N/A')}\n"
        f"üë§ cfg-name: {user_data.get('username', 'N/A')}\n\n"
        f"–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\nüìÖ {formatted_created_date}\n\n"

        f"üìä –†–∞—Å—Ö–æ–¥ —Ç—Ä–∞—Ñ–∏–∫–∞:\n"
        f"- –° –º–æ–º–µ–Ω—Ç–∞ —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: {formatted_traffic}\n"
        f"- –í—Å–µ–≥–æ: {formatted_fulltime_traffic}\n\n"

        f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ:\nüìÖ {formatted_expire_date}"
        f"\n{time_until_expiry}"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    data_limit = user_data.get('data_limit')
    if data_limit and data_limit != 0:
        message += f"\nüìà –õ–∏–º–∏—Ç: {format_traffic(data_limit)}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    print(f"Month price: {user_data.get('month_price')}")
    month_price = user_data.get('month_price')
    if month_price:
        message += f"\n\nüí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: {month_price} —Ä—É–±./–º–µ—Å—è—Ü"
    return message

def get_commands_message():
    """–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    return (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é):</b>\n\n"
        "‚ñ´Ô∏è /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚ñ´Ô∏è /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç\n"
        "‚ñ´Ô∏è /my_configs - –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏\n"
        "‚ñ´Ô∏è /my_info - –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
        "‚ñ´Ô∏è /reset_traffic - –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫\n\n"
        "üìã <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ:</b>"
    )



# def format_traffic(traffic_in_bytes):
#     """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–∑ –±–∞–π—Ç–æ–≤ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (GB)"""
#     if traffic_in_bytes is None or traffic_in_bytes == '0':
#         return "0 B"

#     # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–π—Ç—ã –≤ –≥–∏–≥–∞–±–∞–π—Ç—ã
#     traffic_in_gb = int(traffic_in_bytes) / (1024 ** 3)
#     # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
#     return f"{traffic_in_gb:.2f} GB"

def format_traffic(traffic_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –∏–∑ –±–∞–π—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏"""
    if not traffic_value:
        return "0 B"
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ (–±–∞–π—Ç—ã) - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    if isinstance(traffic_value, (int, float)):
        return format_traffic_bytes(traffic_value)
    # # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤—Ä–æ–¥–µ "15.2 GB"
    # if isinstance(traffic_value, str):
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
    #     if traffic_value.isdigit():
    #         return format_traffic_bytes(int(traffic_value))
    #     return traffic_value  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    return "0 B"

def format_traffic_bytes(bytes_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if bytes_value == 0:
        return "0 B"
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    unit_index = 0
    value = float(bytes_value)

    while value >= 1024 and unit_index < len(units) - 1:
        value /= 1024
        unit_index += 1
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if unit_index == 0:  # B
        return f"{int(value)} {units[unit_index]}"
    elif unit_index == 1:  # KB
        return f"{value:.1f} {units[unit_index]}"
    else:  # MB, GB, TB
        return f"{value:.2f} {units[unit_index]}"

def format_date(date_str, default="–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ timestamp –≤ —Ñ–æ—Ä–º–∞—Ç '–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥'."""
    if not date_str or date_str == 'N/A':
        return default
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
        if isinstance(date_str, str):
            parsed_date = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S.%f")
            return parsed_date.strftime("%d.%m.%Y")
        # –ï—Å–ª–∏ —ç—Ç–æ timestamp (—á–∏—Å–ª–æ)
        elif isinstance(date_str, (int, float)):
            parsed_date = datetime.fromtimestamp(date_str)
            return parsed_date.strftime("%d.%m.%Y")
        else:
            return default
    except (ValueError, TypeError):
        return default

def get_time_until_expiry(expire_date_str):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not expire_date_str or expire_date_str == '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ':
        return "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø"

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if isinstance(expire_date_str, int):  # –ï—Å–ª–∏ —ç—Ç–æ timestamp
            expire_date = datetime.fromtimestamp(expire_date_str)
        elif isinstance(expire_date_str, str):  # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if 'T' in expire_date_str:
                expire_date = datetime.fromisoformat(expire_date_str.replace('Z', ''))
            else:
                expire_date = datetime.strptime(expire_date_str, "%Y-%m-%d")
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

        current_date = datetime.now()

        print(f"‚ùå‚ùå‚ùå current_date: {current_date} ‚ùå‚ùå‚ùå")

        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞
        if expire_date < current_date:
            days_passed = (current_date - expire_date).days
            return f"‚ùå –ò—Å—Ç–µ–∫–ª–∞ {days_passed} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"

        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        time_left = expire_date - current_date
        days_left = time_left.days
        hours_left = time_left.seconds // 3600

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        if days_left >= 30:
            months = days_left // 30
            days = days_left % 30
            if months == 1:
                return f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {months} –º–µ—Å—è—Ü {days} –¥–Ω–µ–π"
            elif months in [2, 3, 4]:
                return f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {months} –º–µ—Å—è—Ü–∞ {days} –¥–Ω–µ–π"
            else:
                return f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {months} –º–µ—Å—è—Ü–µ–≤ {days} –¥–Ω–µ–π"
        elif days_left > 0:
            if days_left in [1, 21, 31]:
                return f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {days_left} –¥–µ–Ω—å"
            elif days_left in [2, 3, 4, 22, 23, 24]:
                return f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {days_left} –¥–Ω—è"
            else:
                return f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {days_left} –¥–Ω–µ–π"
        else:
            return f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è ({hours_left} —á–∞—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å)"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"