import json
import time
import os
from pathlib import Path
from datetime import datetime

class FileBroadcast:
    def __init__(self):
        self.broadcast_dir = Path('broadcasts')
        self.broadcast_dir.mkdir(exist_ok=True)

    def create_broadcast(self, message, admin_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        timestamp = int(time.time())
        filename = self.broadcast_dir / f"broadcast_{timestamp}_{admin_id}.json"

        broadcast_data = {
            'message': message,
            'created_at': timestamp,
            'admin_id': admin_id,
            'processed': False,
            'processed_at': None
        }

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(broadcast_data, f, ensure_ascii=False, indent=2)

        print(f"üì® –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ä–∞—Å—Å—ã–ª–∫–∏: {filename.name}")
        return filename

    def get_pending_broadcasts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        broadcasts = []
        for file in self.broadcast_dir.glob('broadcast_*.json'):
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if not data.get('processed', False):
                        broadcasts.append((file, data))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}: {e}")
                continue

        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(broadcasts)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        return broadcasts

    def mark_as_processed(self, file_path):
        """–ü–æ–º–µ—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            data['processed'] = True
            data['processed_at'] = time.time()

            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

            print(f"‚úÖ –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π: {file_path.name}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

    def cleanup_old_broadcasts(self, days=1):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        try:
            cutoff_time = time.time() - (days * 24 * 3600)
            removed_count = 0

            for file in self.broadcast_dir.glob('broadcast_*.json'):
                if file.stat().st_mtime < cutoff_time:
                    file.unlink()
                    removed_count += 1

            print(f"üßπ –û—á–∏—â–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
broadcast_manager = FileBroadcast()