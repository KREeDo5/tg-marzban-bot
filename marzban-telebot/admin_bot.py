import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
from shared.config import ADMIN_BOT_TOKEN, ADMIN_ID, MESSAGES
from shared.marzban_api import MarzbanAPI
from shared.keyboards import get_admin_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
BROADCAST_MESSAGE = 1

class AdminBot:
    def __init__(self):
        self.api = MarzbanAPI()
        self.application = Application.builder().token(ADMIN_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("users", self.list_users))
        # self.application.add_handler(CommandHandler("status", self.server_status))
        self.application.add_handler(CommandHandler("broadcast", self.broadcast_start))
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('broadcast', self.broadcast_start)],
            states={
                BROADCAST_MESSAGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.broadcast_message)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )
        
        self.application.add_handler(conv_handler)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        reply_markup = ReplyKeyboardMarkup(get_admin_keyboard(), resize_keyboard=True)
        await update.message.reply_text(MESSAGES['admin_welcome'], reply_markup=reply_markup)
    
    async def server_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        if update.effective_user.id != ADMIN_ID:
            return
        
        status = self.api.get_server_status()
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        message = (
            f"üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
            f"üñ•Ô∏è CPU: {status['cpu_usage']}%\n"
            f"üíæ –ü–∞–º—è—Ç—å: {status['memory_usage']}%\n"
            f"üì∂ –¢—Ä–∞—Ñ–∏–∫: {status['network_usage']}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {status['total_users']}\n"
            f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status['active_users']}\n"
            f"üí§ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {status['total_users'] - status['active_users']}\n"
            f"‚è∞ –ê–ø—Ç–∞–π–º: {status['uptime']}"
        )
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def list_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if update.effective_user.id != ADMIN_ID:
            return
        
        users = self.api.get_all_users()
        
        if not users:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        message = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user in users:
            message += f"üë§ {user['username']} - {user['status']} - {user['used_traffic']}/{user['data_limit']}\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def broadcast_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if update.effective_user.id != ADMIN_ID:
            return
        
        await update.message.reply_text(
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=ReplyKeyboardRemove()
        )
        return BROADCAST_MESSAGE
    
    async def broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if update.effective_user.id != ADMIN_ID:
            return
        
        message = update.message.text
        users = self.api.get_all_users()
        
        success_count = 0
        for user in users:
            if user.get('telegram_id'):
                self.api.send_message_to_user(user['username'], message)
                success_count += 1
        
        reply_markup = ReplyKeyboardMarkup(get_admin_keyboard(), resize_keyboard=True)
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if update.effective_user.id != ADMIN_ID:
            return
        
        reply_markup = ReplyKeyboardMarkup(get_admin_keyboard(), resize_keyboard=True)
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=reply_markup)
        return ConversationHandler.END
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
        if update.effective_user.id != ADMIN_ID:
            return
        
        text = update.message.text
        
        # if text == 'üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞':
        #     await self.server_status(update, context)
        if text == 'üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
            await self.list_users(update, context)
        elif text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
            await self.broadcast_start(update, context)
        elif text == 'üÜò –ü–æ–º–æ—â—å':
            await update.message.reply_text("‚ÑπÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø–∞–Ω–µ–ª—å\n/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n/status - —Å—Ç–∞—Ç—É—Å\n/broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞")
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def main():
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    print("üëë –ó–∞–ø—É—Å–∫ Admin Bot...")
    
    if not ADMIN_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: ADMIN_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
    
    bot = AdminBot()
    print("‚úÖ Admin Bot –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    bot.application.run_polling()

if __name__ == '__main__':
    main()