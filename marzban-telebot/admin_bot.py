import logging
import asyncio
import os
import sys
import telegram
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

from shared import (
    ADMIN_BOT_TOKEN,
    ADMIN_ID,
    MarzbanAPI,
    get_admin_keyboard,
)

from shared.buttons import (
    ADMIN_BUTTON_BROADCAST,
    BUTTON_RESTART,
)

from shared.file_broadcast import broadcast_manager

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
BROADCAST_MESSAGE, CONFIRM_BROADCAST = range(2)

class AdminBot:
    def __init__(self):
        self.api = MarzbanAPI()
        self.application = Application.builder().token(ADMIN_BOT_TOKEN).build()
        self.setup_handlers()

    async def broadcast_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != ADMIN_ID:
            return ConversationHandler.END

        await update.message.reply_text(
            "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        return BROADCAST_MESSAGE

    async def receive_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if update.message.text.startswith('/'):
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
            return BROADCAST_MESSAGE

        context.user_data['broadcast_message'] = update.message.text
        users_count = self.get_users_count()

        confirm_keyboard = ReplyKeyboardMarkup([['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']], resize_keyboard=True)

        await update.message.reply_text(
            f"üìä <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{update.message.text}</code>\n\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
            parse_mode='HTML',
            reply_markup=confirm_keyboard
        )
        return CONFIRM_BROADCAST

     # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ confirm_broadcast
    async def confirm_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if update.message.text == '‚ùå –ù–µ—Ç':
            await update.message.reply_text(
                "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=ReplyKeyboardMarkup(get_admin_keyboard(), resize_keyboard=True)
            )
            return ConversationHandler.END

        processing_msg = await update.message.reply_text(
            "üîÑ –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...",
            reply_markup=ReplyKeyboardRemove()
        )

        message = context.user_data['broadcast_message']

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        # –ü–µ—Ä–µ–¥–∞–µ–º update –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
        success_count, no_telegram_count, error_count = await self.send_broadcast(message, update)

        try:
            await processing_msg.delete()
        except:
            pass

        result_text = (
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram: {success_count}\n"
            f"‚Ä¢ –ë–µ–∑ Telegram: {no_telegram_count}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.\n\n"
            f"<code>{message[:100]}...</code>"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )

        await update.message.reply_text(
            result_text,
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(get_admin_keyboard(), resize_keyboard=True)
        )

        context.user_data.clear()
        return ConversationHandler.END

    async def cancel_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=ReplyKeyboardMarkup(get_admin_keyboard(), resize_keyboard=True)
        )
        context.user_data.clear()
        return ConversationHandler.END

    async def send_broadcast(self, message, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–∞—Å—Å—ã–ª–∫–∏
            broadcast_file = broadcast_manager.create_broadcast(
                message,
                update.effective_user.id  # –¢–µ–ø–µ—Ä—å update –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
            )

            print(f"‚úÖ –§–∞–π–ª —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω: {broadcast_file}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            users = self.api.get_all_users()
            total_users = len(users) if users else 0

            # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id
            users_with_telegram = 0
            users_without_telegram = 0

            for user in users:
                note = user.get('note', '')
                note_data = self.api.extract_data_from_note(note)
                if note_data.get('telegram_id'):
                    users_with_telegram += 1
                else:
                    users_without_telegram += 1
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {users_with_telegram} —Å Telegram, {users_without_telegram} –±–µ–∑ Telegram")
            return users_with_telegram, users_without_telegram, 0

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            return 0, 0, 1

    def get_users_count(self):
        try:
            users = self.api.get_all_users()
            return len(users) if users else 0
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return ConversationHandler.END

        reply_markup = ReplyKeyboardMarkup(get_admin_keyboard(), resize_keyboard=True)
        await update.message.reply_text(
            "üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /broadcast - –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
            "‚Ä¢ /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    async def restart_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        if update.effective_user.id != ADMIN_ID:
            return
        try:
            restart_message = await update.message.reply_text(
                "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–±–æ—Ç–∞...",
                reply_markup=ReplyKeyboardRemove()
            )
            await asyncio.sleep(1)
            try:
                await restart_message.edit_text("‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
            except telegram.error.BadRequest:
                await update.message.reply_text("‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
            await asyncio.sleep(0.5)
            await self.start(update, context)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
        # ConversationHandler –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–ï–†–í–´–ú)
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('broadcast', self.broadcast_start),
                MessageHandler(filters.Regex(f'^{ADMIN_BUTTON_BROADCAST}$'), self.broadcast_start)
            ],
            states={
                BROADCAST_MESSAGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_broadcast_message)
                ],
                CONFIRM_BROADCAST: [
                    MessageHandler(filters.Regex('^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$'), self.confirm_broadcast)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self.cancel_broadcast),
                CommandHandler('start', self.cancel_broadcast)
            ],
            allow_reentry=True
        )

        self.application.add_handler(conv_handler)

        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("restart", self.restart_bot))

        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–ü–û–°–õ–ï–î–ù–ò–ú)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
        if update.effective_user.id != ADMIN_ID:
            return

        text = update.message.text

        if text == ADMIN_BUTTON_BROADCAST:
            await self.broadcast_start(update, context)
        elif text == BUTTON_RESTART:
            await self.restart_bot(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ /broadcast - –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
                "‚Ä¢ /restart - –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞\n"
                "‚Ä¢ –ò–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
                reply_markup=ReplyKeyboardMarkup(get_admin_keyboard(), resize_keyboard=True)
            )

def main():
    """–ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    print("üëë –ó–∞–ø—É—Å–∫ Admin Bot...")

    if not ADMIN_BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: ADMIN_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    try:
        bot = AdminBot()
        print("‚úÖ Admin Bot –∑–∞–ø—É—â–µ–Ω")
        bot.application.run_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()